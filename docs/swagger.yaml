definitions:
  menu.CreateMenuRequest:
    properties:
      menu:
        $ref: '#/definitions/menu.Menu'
    type: object
  menu.GetMenuResponse:
    properties:
      menu:
        $ref: '#/definitions/menu.Menu'
    type: object
  menu.Menu:
    properties:
      created_at:
        description: Timestamp with time zone
        type: string
      deleted_at:
        type: integer
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      restaurant_id:
        type: string
      updated_at:
        description: Timestamp with time zone
        type: string
    type: object
  menu.UpdateMenuRequest:
    properties:
      menu:
        $ref: '#/definitions/menu.Menu'
    type: object
  payment.CreatePaymentRequest:
    properties:
      payment:
        $ref: '#/definitions/payment.Payment'
    type: object
  payment.Payment:
    properties:
      amount:
        type: number
      created_at:
        type: string
      deleted_at:
        type: integer
      id:
        type: string
      paid:
        type: number
      payment_method:
        type: string
      payment_status:
        type: string
      reservation_id:
        type: string
      updated_at:
        type: string
    type: object
  payment.UpdatePaymentRequest:
    properties:
      payment:
        $ref: '#/definitions/payment.Payment'
    type: object
  reservation.CheckAvailabilityResponse:
    properties:
      available:
        type: boolean
    type: object
  reservation.CreateReservationRequest:
    properties:
      reservation:
        $ref: '#/definitions/reservation.Reservation'
    type: object
  reservation.CreateReservationResponse:
    properties:
      reservation:
        $ref: '#/definitions/reservation.Reservation'
    type: object
  reservation.GetReservationResponse:
    properties:
      reservation:
        allOf:
        - $ref: '#/definitions/reservation.Reservation'
        description: Error error = 2;
    type: object
  reservation.IsValidRes:
    properties:
      valid:
        type: boolean
    type: object
  reservation.ListReservationsResponse:
    properties:
      reservations:
        items:
          $ref: '#/definitions/reservation.Reservation'
        type: array
    type: object
  reservation.Menus:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      restaurant_id:
        type: string
    type: object
  reservation.OrderBillRes:
    properties:
      payment_id:
        type: string
    type: object
  reservation.OrderFoodListRes:
    properties:
      menus:
        items:
          $ref: '#/definitions/reservation.Menus'
        type: array
    type: object
  reservation.OrderFoodReq:
    properties:
      count:
        type: integer
      id:
        type: string
      menu_id:
        type: string
      reservation_id:
        type: string
    type: object
  reservation.OrderFoodRes:
    properties:
      message:
        type: string
    type: object
  reservation.Reservation:
    properties:
      created_at:
        description: Consider using a well-defined format like RFC 3339
        type: string
      id:
        type: string
      reservation_time:
        description: Consider using a well-defined format like RFC 3339
        type: string
      restaurant_id:
        type: string
      status:
        description: Consider using an enum for better type safety
        type: string
      updated_at:
        description: Consider using a well-defined format like RFC 3339
        type: string
      user_id:
        type: string
    type: object
  reservation.UpdateReservationRequest:
    properties:
      reservation:
        $ref: '#/definitions/reservation.Reservation'
    type: object
  reservation.UpdateReservationResponse:
    properties:
      reservation:
        allOf:
        - $ref: '#/definitions/reservation.Reservation'
        description: Error error = 2;
    type: object
  restaurant.CreateRestaurantRequest:
    properties:
      restaurant:
        $ref: '#/definitions/restaurant.Restaurant'
    type: object
  restaurant.Restaurant:
    properties:
      address:
        type: string
      created_at:
        type: string
      deleted_at:
        type: integer
      description:
        type: string
      id:
        type: string
      name:
        type: string
      phone_number:
        type: string
      updated_at:
        type: string
    type: object
  restaurant.UpdateRestaurantRequest:
    properties:
      restaurant:
        $ref: '#/definitions/restaurant.Restaurant'
    type: object
info:
  contact: {}
paths:
  /api/v1/menu:
    get:
      consumes:
      - application/json
      description: Get all menus
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all menus
      tags:
      - menu
    post:
      consumes:
      - application/json
      description: Create new menu
      parameters:
      - description: Menu
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/menu.CreateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create new menu
      tags:
      - menu
  /api/v1/menu/{id}:
    delete:
      consumes:
      - application/json
      description: Delete menu
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete menu
      tags:
      - menu
    get:
      consumes:
      - application/json
      description: Get menu by ID
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/menu.GetMenuResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get menu by ID
      tags:
      - menu
    put:
      consumes:
      - application/json
      description: Update menu
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      - description: Menu
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/menu.UpdateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update menu
      tags:
      - menu
  /api/v1/payments:
    post:
      consumes:
      - application/json
      description: Create new payment
      parameters:
      - description: Payment
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/payment.CreatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create new payment
      tags:
      - payment
  /api/v1/payments/{id}:
    get:
      consumes:
      - application/json
      description: Get payment by ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get payment by ID
      tags:
      - payment
    put:
      consumes:
      - application/json
      description: Update payment
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/payment.UpdatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update payment
      tags:
      - payment
  /api/v1/reservations:
    get:
      consumes:
      - application/json
      description: Get list of reservations
      parameters:
      - description: User ID
        in: query
        name: user_id
        type: string
      - description: Restaurant ID
        in: query
        name: restaurant_id
        type: string
      - description: Reservation status
        in: query
        name: status
        type: string
      - description: Start time
        in: query
        name: start_time
        type: string
      - description: End time
        in: query
        name: end_time
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of reservations
          schema:
            $ref: '#/definitions/reservation.ListReservationsResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get list of reservations
      tags:
      - reservation
    post:
      consumes:
      - application/json
      description: Create new reservation
      parameters:
      - description: Reservation
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/reservation.CreateReservationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Reservation created
          schema:
            $ref: '#/definitions/reservation.CreateReservationResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create new reservation
      tags:
      - reservation
  /api/v1/reservations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete reservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Reservation deleted
          schema:
            type: string
        "404":
          description: Reservation not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete reservation
      tags:
      - reservation
    get:
      consumes:
      - application/json
      description: Get reservation by ID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Reservation found
          schema:
            $ref: '#/definitions/reservation.GetReservationResponse'
        "404":
          description: Reservation not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get reservation by ID
      tags:
      - reservation
    put:
      consumes:
      - application/json
      description: Update reservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      - description: Reservation
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/reservation.UpdateReservationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reservation updated
          schema:
            $ref: '#/definitions/reservation.UpdateReservationResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: Reservation not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update reservation
      tags:
      - reservation
  /api/v1/reservations/{id}/bill:
    post:
      consumes:
      - application/json
      description: Process bill for reservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Bill details
          schema:
            $ref: '#/definitions/reservation.OrderBillRes'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Process bill for reservation
      tags:
      - reservation
  /api/v1/reservations/{id}/foodlist:
    get:
      consumes:
      - application/json
      description: Get list of foods for a reservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of foods
          schema:
            $ref: '#/definitions/reservation.OrderFoodListRes'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get list of foods for reservation
      tags:
      - reservation
  /api/v1/reservations/{id}/order:
    post:
      consumes:
      - application/json
      description: Order food for reservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/reservation.OrderFoodReq'
      produces:
      - application/json
      responses:
        "200":
          description: Order confirmation
          schema:
            $ref: '#/definitions/reservation.OrderFoodRes'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Order food for reservation
      tags:
      - reservation
  /api/v1/reservations/{id}/valid:
    get:
      consumes:
      - application/json
      description: Check if a reservation is valid
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Validation status
          schema:
            $ref: '#/definitions/reservation.IsValidRes'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Check if a reservation is valid
      tags:
      - reservation
  /api/v1/reservations/check:
    get:
      consumes:
      - application/json
      description: Check reservation availability
      parameters:
      - description: Restaurant ID
        in: query
        name: restaurant_id
        required: true
        type: string
      - description: Reservation time
        in: query
        name: reservation_time
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Availability status
          schema:
            $ref: '#/definitions/reservation.CheckAvailabilityResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Check reservation availability
      tags:
      - reservation
  /api/v1/restaurants:
    get:
      consumes:
      - application/json
      description: Get all restaurants
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all restaurants
      tags:
      - restaurant
    post:
      consumes:
      - application/json
      description: Create new restaurant
      parameters:
      - description: Restaurant
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/restaurant.CreateRestaurantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create new restaurant
      tags:
      - restaurant
  /api/v1/restaurants/{id}:
    delete:
      consumes:
      - application/json
      description: Delete restaurant
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete restaurant
      tags:
      - restaurant
    get:
      consumes:
      - application/json
      description: Get restaurant by ID
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get restaurant by ID
      tags:
      - restaurant
    put:
      consumes:
      - application/json
      description: Update restaurant
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      - description: Restaurant
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/restaurant.UpdateRestaurantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update restaurant
      tags:
      - restaurant
swagger: "2.0"
